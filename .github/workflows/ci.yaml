name: Helm Chart CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  HELM_VERSION: '3.13.0'
  CHART_PATH: './secure-app-platform'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install chart-testing
      uses: helm/chart-testing-action@v2.6.1

    - name: Install additional tools
      run: |
        # Install helm plugins
        helm plugin install https://github.com/quintush/helm-unittest || true
        helm plugin install https://github.com/databus23/helm-diff || true
        
        # Install yamllint and yamale for additional validation
        pip install yamllint yamale

    - name: Add Helm repositories
      run: |
        helm repo add bitnami https://charts.bitnami.com/bitnami
        helm repo update

    - name: Run chart-testing (list-changed)
      id: list-changed
      run: |
        changed=$(ct list-changed --target-branch ${{ github.event.repository.default_branch }} --chart-dirs .)
        if [[ -n "$changed" ]]; then
          echo "changed=true" >> "$GITHUB_OUTPUT"
          echo "Charts changed: $changed"
        else
          echo "changed=false" >> "$GITHUB_OUTPUT"
          echo "No charts changed"
        fi

    - name: Run Helm lint
      run: |
        echo "Running Helm lint on chart..."
        helm lint ${{ env.CHART_PATH }}

    - name: Run chart-testing (lint)
      if: steps.list-changed.outputs.changed == 'true'
      run: |
        ct lint --chart-dirs . --target-branch ${{ github.event.repository.default_branch }}

    - name: Validate Helm templates
      run: |
        echo "Validating Helm templates..."
        helm template test-release ${{ env.CHART_PATH }} --debug --dry-run

    - name: Run Helm unittest
      run: |
        echo "Running Helm unit tests..."
        if [ -d "${{ env.CHART_PATH }}/tests" ]; then
          helm unittest ${{ env.CHART_PATH }}
        else
          echo "No unit tests found, skipping..."
        fi

    - name: Security scan with Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: ${{ env.CHART_PATH }}/templates
        framework: kubernetes
        output_format: sarif
        output_file_path: checkov-results.sarif
      continue-on-error: true

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: checkov-results.sarif
      continue-on-error: true

    - name: Create kind cluster
      if: steps.list-changed.outputs.changed == 'true'
      uses: helm/kind-action@v1.8.0
      with:
        cluster_name: helm-testing
        kubectl_version: '1.28.0'

    - name: Install cert-manager (for testing)
      if: steps.list-changed.outputs.changed == 'true'
      run: |
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.yaml
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/instance=cert-manager -n cert-manager --timeout=300s

    - name: Install ingress-nginx (for testing)  
      if: steps.list-changed.outputs.changed == 'true'
      run: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
        kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s

    - name: Run chart-testing (install)
      if: steps.list-changed.outputs.changed == 'true'
      run: |
        # Create test values for installation
        cat > test-values.yaml << EOF
        ingress:
          enabled: true
          hosts:
            - host: test.local
              paths:
                - path: /
                  pathType: Prefix
          tls: []
        
        auth:
          jwt:
            secret: "test-secret-key-for-testing-only"
        
        redis:
          auth:
            password: "test-redis-password"
        EOF
        
        ct install --chart-dirs . --target-branch ${{ github.event.repository.default_branch }} --helm-extra-set-args "--values=test-values.yaml"

    - name: Test Helm deployment
      if: steps.list-changed.outputs.changed == 'true'
      run: |
        # Install the chart with test values
        helm install test-release ${{ env.CHART_PATH }} \
          --values test-values.yaml \
          --wait --timeout=300s
        
        # Check if pods are running
        kubectl get pods -l app.kubernetes.io/instance=test-release
        
        # Check if services are created
        kubectl get services -l app.kubernetes.io/instance=test-release
        
        # Run basic connectivity test
        kubectl run test-pod --image=curlimages/curl:latest --rm -i --restart=Never -- \
          curl -f http://test-release-secure-app-platform/health || echo "Health check endpoint not available"

    - name: Generate documentation
      run: |
        # Install helm-docs
        GO111MODULE=on go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
        
        # Generate documentation
        ~/go/bin/helm-docs --chart-search-root=${{ env.CHART_PATH }}

    - name: Verify Kubernetes manifests
      run: |
        # Use kubeval to validate generated manifests
        curl -L https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz | tar xz
        sudo mv kubeval /usr/local/bin
        
        # Generate and validate manifests
        helm template test-release ${{ env.CHART_PATH }} --values test-values.yaml | kubeval

  package-and-release:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ env.HELM_VERSION }}

    - name: Package Helm chart
      run: |
        helm package ${{ env.CHART_PATH }}
        
    - name: Upload chart artifact
      uses: actions/upload-artifact@v3
      with:
        name: helm-chart-package
        path: '*.tgz'

    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: '*.tgz'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: ${{ env.CHART_PATH }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Scan for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified